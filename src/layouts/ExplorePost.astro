---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import ExploreHero from "@/components/explore/ExploreHero";
import TOC from "@/components/blog/TOC";

interface Props {
	explore: CollectionEntry<"explore">;
}

const { explore } = Astro.props;
const {
	data: { title, description, ogImage, publishDate, updatedDate, url, techs, relatedArticles },
	slug,
} = explore;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const date = updatedDate ?? publishDate;
const articleDate = date.getTime() ? date.toISOString() : new Date().toISOString();
let { headings } = await explore.render();
headings = [
	{ depth: 2, slug: "technologies", text: "Technologies" },
	{ depth: 2, slug: "url", text: "The URL" },
	{ depth: 2, slug: "related-articles", text: "Related Articles" },
	{ depth: 2, slug: "description", text: "Description" },
	...headings,
];
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{!!headings.length && <TOC headings={headings} comment={false} />}
		<article class="flex-grow break-words" data-pagefind-body>
			<div id="blog-hero"><ExploreHero content={explore} /></div>
			<div
				class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"
			>
				{
					!!techs?.length && (
						<>
							<h2 class="'mt-3 text-lg font-semibold text-accent-2" id="technologies">
								Technologies:
							</h2>

							<div class="flex flex-wrap items-center gap-2">
								{techs.map((tech) => (
									<a
										class="inline-block rounded-lg bg-accent-2/10 p-1 text-accent-2 before:content-['#']"
										aria-label={`View more blogs with the tag ${tech}`}
										href={`/explore/techs/${tech}/`}
										data-pagefind-filter="tag"
									>
										{tech}
									</a>
								))}
							</div>
						</>
					)
				}

				<h2 id="url"><a href={url}>The URL</a></h2>

				{
					!!relatedArticles?.length && (
						<>
							<h2 id="related-articles">Related Articles</h2>
							<ul>
								{relatedArticles.map((article) => (
									<li>
										<a href={`/posts/${article}`}>{article}</a>
									</li>
								))}
							</ul>
						</>
					)
				}

				<h2 id="description">Description</h2>
				{!!description && <p>{description}</p>}
				<slot />
			</div>
		</article>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>
